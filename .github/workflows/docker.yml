name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_run:
    workflows: [Python CI with pytest]
    types: [completed]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x'

      - name: Restore dependencies
        run: dotnet restore EventManagement/EventManagement.csproj

      - name: Build the main application
        run: dotnet build EventManagement/EventManagement.csproj --configuration Release --no-restore

      - name: Run tests
        run: dotnet test EventManagement.Tests/EventManagement.Tests.csproj --no-restore --verbosity normal

  build-docker-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List files in directory
        run: ls -la

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set environment variables
        run: |
          echo "INSTANCE_CONNECTION_NAME=${{ secrets.INSTANCE_CONNECTION_NAME }}" >> $GITHUB_ENV
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -f Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/event-management-app .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/event-management-app

  deploy:
    needs: build-docker-image
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy event-management-app \
          --image ${{ secrets.DOCKER_HUB_USERNAME }}/event-management-app:latest \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --update-env-vars "ConnectionStrings__EventManagementContextConnection=Server=${{ secrets.INSTANCE_CONNECTION_NAME }};Database=${{ secrets.DATABASE_NAME }};User Id=${{ secrets.DB_USERNAME }};Password=${{ secrets.DB_PASSWORD }};Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;"

  migrate:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Run EF Core migrations
        run: |
          gcloud run exec --project ${{ secrets.GCP_PROJECT_ID }} --region us-central1 event-management-app -- dotnet ef database update --project EventManagement/EventManagement.csproj --configuration Release

  notify-on-failure:
    if: failure()
    runs-on: ubuntu-latest

    steps:
      - name: Notify on failure
        run: echo 'The triggering workflow failed'
